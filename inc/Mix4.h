/*
 * Company: Blackaddr Audio
 * Effect Name: Mix4
 * Description: 
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#pragma once

#include <Audio.h>
#include <arm_math.h>
#include "Aviate/AudioEffectWrapper.h"

//!s - START_USER_INCLUDES - put your #includes below this line before the matching END
//!e - END_USER_INCLUDES

namespace BlackaddrAudio_Mix4 {

//!s - START_USER_EFFECT_TYPES - put your effect types below this line before the matching END
//!e - END_USER_EFFECT_TYPES

class Mix4 : public AudioStream, public Aviate::AudioEffectWrapper {
public:
    static constexpr unsigned NUM_INPUTS  = 4;
    static constexpr unsigned NUM_OUTPUTS = 2;

    // List of effect control names
    enum {
        Bypass_e = 0,
        Volume_e = 1,
        Channel1Level_e = 2,
        Channel2Level_e = 3,
        Channel3Level_e = 4,
        Channel4Level_e = 5,
        Channel1Pan_e = 6,
        Channel2Pan_e = 7,
        Channel3Pan_e = 8,
        Channel4Pan_e = 9,
        Master1_e = 10,
        Master2_e = 11,
        NUM_CONTROLS
    };

    //!s - START_USER_CLASS_TYPES - put your custom class types below this line before the matching END
    //!e - END_USER_CLASS_TYPES

    Mix4();

    //!s - START_USER_CONSTRUCTORS - put your custom constructors below this line before the matching END
    //!e - END_USER_CONSTRUCTORS

    virtual ~Mix4();

    // Standard EFX interface functions - do not change these declaration
    virtual void update(); // main audio processing loop function
    void mapMidiControl(int parameter, int midiCC, int midiChannel = 0) override;
    void processMidi(int channel, int midiCC, int value) override;
    void setParam(int paramIndex, float paramValue) override;
    float getUserParamValue(int paramIndex, float normalizedParamValue);
    const char* getName() override;
    const uint8_t* getRblk() override;

    // control value set functions, must take floats between 0.0f and 1.0f - do not change these declarations
    void volume(float value) override;
    void channel1level(float value);
    void channel2level(float value);
    void channel3level(float value);
    void channel4level(float value);
    void channel1pan(float value);
    void channel2pan(float value);
    void channel3pan(float value);
    void channel4pan(float value);
    void master1(float value);
    void master2(float value);

    //!s - START_USER_PUBLIC_MEMBERS - put your public members below this line before the matching END
    //!e - END_USER_PUBLIC_MEMBERS

private:
    audio_block_t *m_inputQueueArray[4]; // required by AudioStream base class, array size is num inputs
    int m_midiConfig[NUM_CONTROLS][2]; // stores the midi parameter mapping

    // m_bypass and m_volume are already provided by the base class AudioEffectWrapper
    float m_channel1level = 0.0f;
    float m_channel2level = 0.0f;
    float m_channel3level = 0.0f;
    float m_channel4level = 0.0f;
    float m_channel1pan = 0.0f;
    float m_channel2pan = 0.0f;
    float m_channel3pan = 0.0f;
    float m_channel4pan = 0.0f;
    float m_master1 = 0.0f;
    float m_master2 = 0.0f;

    audio_block_t* m_basicInputCheck(audio_block_t* inputAudioBlock, unsigned outputChannel);

    //!s - START_USER_PRIVATE_MEMBERS - put your private members below this line before the matching END
    //!e - END_USER_PRIVATE_MEMBERS

};

}
