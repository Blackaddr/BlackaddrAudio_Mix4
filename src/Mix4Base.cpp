/*
 * Company: Blackaddr Audio
 * Effect Name: Mix4
 * Description: A simple four input channel, 2 output channel stereo mixer with per-channel panning control.
 *
 * This file was auto-generated by Aviate Audio Effect Creator for the Multiverse.
 */
#include <cmath>
#include "Aviate/LibBasicFunctions.h"
#include "Mix4.h"

using namespace Aviate;

namespace BlackaddrAudio_Mix4 {

void Mix4::mapMidiControl(int parameter, int midiCC, int midiChannel)
{
    if (parameter >= NUM_CONTROLS) {
        return ; // Invalid midi parameter
    }
    m_midiConfig[parameter][MIDI_CHANNEL] = midiChannel;
    m_midiConfig[parameter][MIDI_CONTROL] = midiCC;
}

void Mix4::setParam(int paramIndex, float paramValue)
{
    switch(paramIndex) {
    case 0 : bypass( (paramValue - 0.000000) / (1.000000 - 0.000000) ); break;
    case 1 : volume( (paramValue - 0.000000) / (10.000000 - 0.000000) ); break;
    case 2 : channel1level( (paramValue - -60.000000) / (12.000000 - -60.000000) ); break;
    case 3 : channel2level( (paramValue - -60.000000) / (12.000000 - -60.000000) ); break;
    case 4 : channel3level( (paramValue - -60.000000) / (12.000000 - -60.000000) ); break;
    case 5 : channel4level( (paramValue - -60.000000) / (12.000000 - -60.000000) ); break;
    case 6 : channel1pan( (paramValue - -1.000000) / (1.000000 - -1.000000) ); break;
    case 7 : channel2pan( (paramValue - -1.000000) / (1.000000 - -1.000000) ); break;
    case 8 : channel3pan( (paramValue - -1.000000) / (1.000000 - -1.000000) ); break;
    case 9 : channel4pan( (paramValue - -1.000000) / (1.000000 - -1.000000) ); break;
    case 10 : master1( (paramValue - -60.000000) / (20.000000 - -60.000000) ); break;
    case 11 : master2( (paramValue - -60.000000) / (20.000000 - -60.000000) ); break;
    default : break;
    }
}

float Mix4::getUserParamValue(int paramIndex, float normalizedParamValue)
{
    switch(paramIndex) {
    case 0 : return ( ((1.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // bypass
    case 1 : return ( ((10.000000 - 0.000000) * normalizedParamValue) + 0.000000 ); // volume
    case 2 : return ( ((12.000000 - -60.000000) * normalizedParamValue) + -60.000000 ); // channel1level
    case 3 : return ( ((12.000000 - -60.000000) * normalizedParamValue) + -60.000000 ); // channel2level
    case 4 : return ( ((12.000000 - -60.000000) * normalizedParamValue) + -60.000000 ); // channel3level
    case 5 : return ( ((12.000000 - -60.000000) * normalizedParamValue) + -60.000000 ); // channel4level
    case 6 : return ( ((1.000000 - -1.000000) * normalizedParamValue) + -1.000000 ); // channel1pan
    case 7 : return ( ((1.000000 - -1.000000) * normalizedParamValue) + -1.000000 ); // channel2pan
    case 8 : return ( ((1.000000 - -1.000000) * normalizedParamValue) + -1.000000 ); // channel3pan
    case 9 : return ( ((1.000000 - -1.000000) * normalizedParamValue) + -1.000000 ); // channel4pan
    case 10 : return ( ((20.000000 - -60.000000) * normalizedParamValue) + -60.000000 ); // master1
    case 11 : return ( ((20.000000 - -60.000000) * normalizedParamValue) + -60.000000 ); // master2
    default : return 0.0f;
    }
}

void Mix4::processMidi(int channel, int control, int value)
{
    float val = (float)value / 127.0f;

    if ((m_midiConfig[Bypass_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Bypass_e][MIDI_CONTROL] == control)) {
        bypass(val);
        return;
    }

    if ((m_midiConfig[Volume_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Volume_e][MIDI_CONTROL] == control)) {
        volume(val);
        return;
    }

    if ((m_midiConfig[Channel1Level_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel1Level_e][MIDI_CONTROL] == control)) {
        channel1level(val);
        return;
    }

    if ((m_midiConfig[Channel2Level_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel2Level_e][MIDI_CONTROL] == control)) {
        channel2level(val);
        return;
    }

    if ((m_midiConfig[Channel3Level_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel3Level_e][MIDI_CONTROL] == control)) {
        channel3level(val);
        return;
    }

    if ((m_midiConfig[Channel4Level_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel4Level_e][MIDI_CONTROL] == control)) {
        channel4level(val);
        return;
    }

    if ((m_midiConfig[Channel1Pan_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel1Pan_e][MIDI_CONTROL] == control)) {
        channel1pan(val);
        return;
    }

    if ((m_midiConfig[Channel2Pan_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel2Pan_e][MIDI_CONTROL] == control)) {
        channel2pan(val);
        return;
    }

    if ((m_midiConfig[Channel3Pan_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel3Pan_e][MIDI_CONTROL] == control)) {
        channel3pan(val);
        return;
    }

    if ((m_midiConfig[Channel4Pan_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Channel4Pan_e][MIDI_CONTROL] == control)) {
        channel4pan(val);
        return;
    }

    if ((m_midiConfig[Master1_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Master1_e][MIDI_CONTROL] == control)) {
        master1(val);
        return;
    }

    if ((m_midiConfig[Master2_e][MIDI_CHANNEL] == channel) && (m_midiConfig[Master2_e][MIDI_CONTROL] == control)) {
        master2(val);
        return;
    }

}

audio_block_t* Mix4::m_basicInputCheck(audio_block_t* inputAudioBlock, unsigned outputChannel)
{
    // Check if effect is disabled
    if (m_enable == false) {
        // do not transmit or process any audio, return as quickly as possible after releasing the inputs
        if (inputAudioBlock) { release(inputAudioBlock); }
        return nullptr; // disabled, no further EFX processing in update()
    }  // end of enable check

    // check if effect is in bypass
    if (m_bypass == true) {
        // drive input directly to the specified output. ie. bypass
        if (inputAudioBlock != nullptr) {
            // valid input, drive to outputChannel if specified
            if (outputChannel >= 0) {
                transmit(inputAudioBlock, outputChannel); // drive to specified output
            }
            release(inputAudioBlock); // release the input block as we are done with it
        } else { // invalid input block, allocate a block and drive silence if specified
            if (outputChannel >= 0) {
                audio_block_t* silenceBlock = allocate();
                if (silenceBlock) {
                    clearAudioBlock(silenceBlock);  // create silence in the buffer
                    transmit(silenceBlock, outputChannel);
                    release(silenceBlock);
                }
            }
        }
        return nullptr;  // bypassed, no further EFX processing in update()
    }  // end of bypass check

    // If not disabled or bypassed, create silence if the input block is invalid then
    // return the valid audio block so update() can continue.
    if (inputAudioBlock == nullptr) {
        inputAudioBlock = allocate();
        if (inputAudioBlock == nullptr) { return nullptr; } // check if allocate was unsuccessful
        // else
        clearAudioBlock(inputAudioBlock);
    }
    return inputAudioBlock; // inputAudioBLock is valid and ready for update() processing
}

const uint8_t rblk[256] = TEENSY_AUDIO_BLOCK;
const uint8_t* Mix4::getRblk() { return rblk; }
static constexpr char PROGMEM Mix4_name[] = {0x42, 0x6c, 0x61, 0x63, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x20, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x3a, 0x4d, 0x69, 0x78, 0x34, 0x0};
const char* Mix4::getName() { return Mix4_name; }

}
